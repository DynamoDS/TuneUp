<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Button_Export" xml:space="preserve">
    <value>输出</value>
  </data>
  <data name="Button_ExportCsv" xml:space="preserve">
    <value>输出为 CSV</value>
  </data>
  <data name="Button_ExportJson" xml:space="preserve">
    <value>输出为 JSON</value>
  </data>
  <data name="Button_RunAll" xml:space="preserve">
    <value>全部运行</value>
  </data>
  <data name="Button_ShowGroups" xml:space="preserve">
    <value>显示组</value>
  </data>
  <data name="Button_ShowTuneUp" xml:space="preserve">
    <value>显示 TuneUp</value>
  </data>
  <data name="ExtensionName" xml:space="preserve">
    <value>TuneUp</value>
  </data>
  <data name="Header_ExecutionOrder" xml:space="preserve">
    <value>#</value>
  </data>
  <data name="Header_ExecutionTime" xml:space="preserve">
    <value>执行时间(毫秒)</value>
  </data>
  <data name="Header_Name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="Label_DefaultDisplayGroupName" xml:space="preserve">
    <value>标题</value>
  </data>
  <data name="Label_DefaultExecutionTime" xml:space="preserve">
    <value>不适用</value>
  </data>
  <data name="Label_DefaultGroupName" xml:space="preserve">
    <value>标题 &lt;双击此处编辑组标题&gt;</value>
  </data>
  <data name="Label_ExecutionTime" xml:space="preserve">
    <value>执行时间</value>
  </data>
  <data name="Label_GraphExecutionTime" xml:space="preserve">
    <value>图形执行时间(毫秒)</value>
  </data>
  <data name="Label_GroupNodePrefix" xml:space="preserve">
    <value>组:</value>
  </data>
  <data name="Label_GroupTotalExecutionTime" xml:space="preserve">
    <value>组合计</value>
  </data>
  <data name="Label_Latest" xml:space="preserve">
    <value>最新</value>
  </data>
  <data name="Label_LatestRun" xml:space="preserve">
    <value>最新运行</value>
  </data>
  <data name="Label_NotExecuted" xml:space="preserve">
    <value>未执行</value>
  </data>
  <data name="Label_Previous" xml:space="preserve">
    <value>上一个</value>
  </data>
  <data name="Label_PreviousRun" xml:space="preserve">
    <value>上次运行</value>
  </data>
  <data name="Label_Total" xml:space="preserve">
    <value>总计</value>
  </data>
  <data name="Message_FileInUse" xml:space="preserve">
    <value>文件当前正由其他应用程序使用。请先关闭文件，然后再尝试将其覆盖。</value>
  </data>
  <data name="Message_FileWriteError" xml:space="preserve">
    <value>尝试写入文件时出错: {0}</value>
  </data>
  <data name="Title_Error" xml:space="preserve">
    <value>错误</value>
  </data>
  <data name="Title_FileInUse" xml:space="preserve">
    <value>文件正在使用</value>
  </data>
  <data name="ToolTip_ExecutionOrder" xml:space="preserve">
    <value>执行顺序。</value>
  </data>
  <data name="ToolTip_ExecutionTime" xml:space="preserve">
    <value>执行节点所花费的时间(以毫秒为单位)。介于 0 和 1 之间的值将向上舍入到 1 毫秒。</value>
  </data>
  <data name="ToolTip_NotExecuted" xml:space="preserve">
    <value>在最新运行中未执行的节点，因为它们没有更改。若要重新执行，请按“全部运行”。</value>
  </data>
  <data name="ToolTip_OriginalName" xml:space="preserve">
    <value>原始节点名称:
{0}</value>
  </data>
  <data name="ToolTip_RunAll" xml:space="preserve">
    <value>执行整个图表，包括自上次运行以来没有更改的节点。</value>
  </data>
  <data name="ToolTip_RunAllDisabled" xml:space="preserve">
    <value>自定义节点模式不支持“全部运行”。</value>
  </data>
  <data name="ToolTip_TotalExecutionTime" xml:space="preserve">
    <value>最新运行和上次运行的组合执行时间。</value>
  </data>
</root>